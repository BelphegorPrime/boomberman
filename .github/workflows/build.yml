name: Build, Tag and Release Docker Image

on:
  push:
    branches:
      - master
      - dev*
      - release*
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      repo: ${{ steps.vars.outputs.repo }}
      tags: ${{ steps.vars.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare lowercase repo name and Docker tags
        id: vars
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TAGS="ghcr.io/${REPO}:latest"
          VERSION=""
          BRANCH="${GITHUB_REF##*/}"

          if [[ "${BRANCH}" == dev* ]]; then
            TAGS="$TAGS,ghcr.io/${REPO}:alpha"
          elif [[ "${BRANCH}" == release* ]]; then
            TAGS="$TAGS,ghcr.io/${REPO}:beta"
          fi

          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            TAGS="$TAGS,ghcr.io/${REPO}:${VERSION}"
          fi

          echo "REPO=$REPO" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: true
          sbom: true
          tags: ${{ steps.vars.outputs.tags }}
          outputs: type=registry
          annotations: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  release:
    name: Create GitHub Release (if version tag)
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        run: |
          COSIGN_VERSION="v2.5.3"
          curl -L "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64" -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/cosign

      - name: Download Attestation
        run: |
          cosign verify-attestation ghcr.io/${{ needs.build.outputs.repo }}:${{ needs.build.outputs.version }} \
            --keyless \
            --output-file ./attestations.json

      - name: Download SBOM
        run: |
          cosign download sbom ghcr.io/${{ needs.build.outputs.repo }}:${{ needs.build.outputs.version }} \
            --output-file ./sbom.spdx.json

      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=format:"%s%n%n%b" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload Docker metadata as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-metadata
          path: |
            ./sbom.spdx.json
            ./attestations.json
          if-no-files-found: error

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          body: ${{ env.CHANGELOG }}
          files: |
            ./sbom.spdx.json
            ./attestations.json
